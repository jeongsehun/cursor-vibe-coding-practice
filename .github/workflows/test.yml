name: 테스트 자동 실행

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Python 환경 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 의존성 설치
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov

    - name: 린트 체크
      run: |
        pip install flake8
        # 문법 오류나 정의되지 않은 이름으로 인한 실패 중지
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # 복잡도 경고를 제외하고 모든 오류를 중지
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 테스트 실행
      run: |
        if [ -d "tests" ]; then
          pytest tests/ --cov=. --cov-report=xml --cov-report=html
        else
          echo "테스트 디렉토리가 없습니다. 기본 검증을 수행합니다."
          python -c "import sys; print('Python 버전:', sys.version)"
        fi

    - name: 코드 커버리지 업로드
      uses: codecov/codecov-action@v3
      if: matrix.python-version == 3.11
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

    - name: FastAPI 서버 테스트
      run: |
        if [ -f "main.py" ] || [ -f "app/main.py" ]; then
          echo "FastAPI 서버 시작 테스트"
          timeout 10s python -c "
          try:
              import uvicorn
              print('FastAPI 의존성 확인 완료')
          except ImportError:
              print('FastAPI 또는 uvicorn이 설치되지 않음')
          " || true
        fi

    - name: Streamlit 앱 테스트
      run: |
        if ls *.py 1> /dev/null 2>&1; then
          echo "Streamlit 앱 검증"
          timeout 10s python -c "
          try:
              import streamlit
              print('Streamlit 의존성 확인 완료')
          except ImportError:
              print('Streamlit이 설치되지 않음')
          " || true
        fi 